stages:
  - build
  - test
  - deploy

# Global Variables
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""  # Disable TLS for Docker-in-Docker
  CONTAINER_IMAGE: ssebatta1414/bsse24-22
  DOCKER_BUILDKIT: "1"

# Docker Login Template for Docker Hub
.docker-login:
  before_script:
    - echo "$DOCKERHUB_ACCESS_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

# Base Job Setup with Docker-in-Docker
.base-job:
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

# Build Stage: Install dependencies and build Docker image
build-job:
  stage: build
  extends:
    - .base-job
    - .docker-login
  script:
    - docker build --cache-from $CONTAINER_IMAGE:latest --build-arg BUILDKIT_INLINE_CACHE=1 -t $CONTAINER_IMAGE:$CI_COMMIT_SHA -t $CONTAINER_IMAGE:latest .
    - docker push $CONTAINER_IMAGE:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# Test Stage: Run Django unit tests
unit-test-job:
  stage: test
  image: python:3.11
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt  # Adjusted to match your project structure
  script:
    - cd artisanProject  # Navigate to the Django project directory
    - python manage.py test  # Run Django tests
  dependencies:
    - build-job
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
# Deploy Stage: SSH into the server and run Docker commands
deploy_staging:
  extends:
    - .base-job
    - .docker-login
  stage: deploy
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" > /tmp/private_key
    - chmod 400 /tmp/private_key
    # Removed ssh-add line
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa,ed25519,ecdsa "$SERVER_IP" >> ~/.ssh/known_hosts

  script:
    - |
      ssh -i /tmp/private_key -o StrictHostKeyChecking=no "$SSH_USER@$SERVER_IP" "
        echo '$DOCKERHUB_ACCESS_TOKEN' | docker login -u '$DOCKERHUB_USERNAME' --password-stdin
        docker pull $CONTAINER_IMAGE:latest

        # Stop and remove existing container if it exists
        docker stop app_container || true
        docker rm app_container || true

        # Run new container on port 8000 for staging
        docker run -d \
          --name app_container \
          --restart unless-stopped \
          -p 8000:3000 \
          $CONTAINER_IMAGE:latest
        
        # Cleanup old images
        docker image prune -af
      "
  environment:
    name: staging
    url: http://$SERVER_IP:8000
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'

deployment:
  extends:
    - .base-job
    - .docker-login
  stage: deploy
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" > /tmp/private_key
    - chmod 400 /tmp/private_key
    # Removed ssh-add line
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa,ed25519,ecdsa "$SERVER_IP" >> ~/.ssh/known_hosts

  script:
    - |
      ssh -i /tmp/private_key -o StrictHostKeyChecking=no "$SSH_USER@$SERVER_IP" "
        echo '$DOCKERHUB_ACCESS_TOKEN' | docker login -u '$DOCKERHUB_USERNAME' --password-stdin
        docker pull $CONTAINER_IMAGE:latest

        # Stop and remove existing container if it exists
        docker stop app_container || true
        docker rm app_container || true

        # Run new container on port 8080 for production
        docker run -d \
          --name app_container \
          --restart unless-stopped \
          -p 8080:3000 \
          $CONTAINER_IMAGE:latest

        # Cleanup old images
        docker image prune -af
      "
  environment:
    name: production
    url: http://$SERVER_IP:8080
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"'
